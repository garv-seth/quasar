Browser-use is the easiest way to connect your AI agents with the browser.

üí° See what others are building and share your projects in our Discord - we'd love to see what you create!

üå©Ô∏è Skip the setup - try our hosted version for instant browser automation! Try it now.

Quick start

With pip (Python>=3.11):

pip install browser-use
install playwright:

playwright install
Spin up your agent:

from langchain_openai import ChatOpenAI
from browser_use import Agent
import asyncio
from dotenv import load_dotenv
load_dotenv()

async def main():
    agent = Agent(
        task="Go to Reddit, search for 'browser-use', click on the first post and return the first comment.",
        llm=ChatOpenAI(model="gpt-4o"),
    )
    result = await agent.run()
    print(result)

asyncio.run(main())
Add your API keys for the provider you want to use to your .env file.

OPENAI_API_KEY=
For other settings, models, and more, check out the documentation üìï.

Test with UI

You can test browser-use with a UI repository

Or simply run the gradio example:

uv pip install gradio
python examples/ui/gradio_demo.py
Demos




Task: Add grocery items to cart, and checkout.

AI Did My Groceries




Prompt: Add my latest LinkedIn follower to my leads in Salesforce.

LinkedIn to Salesforce




Prompt: Read my CV & find ML jobs, save them to a file, and then start applying for them in new tabs, if you need help, ask me.'

 apply.to.jobs.8x.mp4 




Prompt: Write a letter in Google Docs to my Papa, thanking him for everything, and save the document as a PDF.

Letter to Papa




Prompt: Look up models with a license of cc-by-sa-4.0 and sort by most likes on Hugging face, save top 5 to file.

 hugging_face_high_quality.mp4 




More examples

For more examples see the examples folder or join the Discord and show off your project.

Vision

Tell your computer what to do, and it gets it done.

Roadmap

Agent

 Improve agent memory (summarize, compress, RAG, etc.)
 Enhance planning capabilities (load website specific context)
 Reduce token consumption (system prompt, DOM state)
DOM Extraction

 Improve extraction for datepickers, dropdowns, special elements
 Improve state representation for UI elements
Rerunning tasks

 LLM as fallback
 Make it easy to define workfows templates where LLM fills in the details
 Return playwright script from the agent
Datasets

 Create datasets for complex tasks
 Benchmark various models against each other
 Fine-tuning models for specific tasks
User Experience

 Human-in-the-loop execution
 Improve the generated GIF quality
 Create various demos for tutorial execution, job application, QA testing, social media, etc.
Contributing

We love contributions! Feel free to open issues for bugs or feature requests. To contribute to the docs, check out the /docs folder.

Local Setup

To learn more about the library, check out the local setup üìï.

Cooperations

We are forming a commission to define best practices for UI/UX design for browser agents. Together, we're exploring how software redesign improves the performance of AI agents and gives these companies a competitive advantage by designing their existing software to be at the forefront of the agent age.

Email Toby to apply for a seat on the committee.

Citation

If you use Browser Use in your research or project, please cite:

@software{browser_use2024,
  author = {M√ºller, Magnus and ≈Ωuniƒç, Gregor},
  title = {Browser Use: Enable AI to control your browser},
  year = {2024},
  publisher = {GitHub},
  url = {https://github.com/browser-use/browser-use}
}